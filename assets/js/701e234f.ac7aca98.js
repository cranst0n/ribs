"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[632],{7027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var a=n(7462),i=(n(7294),n(3905)),r=n(4214);const o="import 'package:ribs_core/ribs_core.dart';\n\n/// create-user-1\n\n// Some type aliases for clarity\ntypedef Name = String;\ntypedef Alias = String;\ntypedef Age = int;\n\nfinal class User {\n  final Name name;\n  final Alias alias;\n  final Age age;\n\n  const User(this.name, this.alias, this.age);\n}\n\nEither<String, User> userEither(Name name, Alias alias, Age age) =>\n    throw UnimplementedError();\n\n/// create-user-1\n\n/// create-user-2\n\nValidatedNel<String, Name> validateName(Name name) =>\n    name.isEmpty ? 'No name provided!'.invalidNel() : name.validNel();\n\nValidatedNel<String, Alias> validateAlias(Alias alias) =>\n    alias.isEmpty ? 'No alias provided!'.invalidNel() : alias.validNel();\n\nValidatedNel<String, Age> validateAge(Age age) =>\n    age < 18 ? 'Too young!'.invalidNel() : age.validNel();\n\nValidatedNel<String, User> createUser(User user) => (\n      validateName(user.name),\n      validateAlias(user.alias),\n      validateAge(user.age),\n    ).mapN(User.new);\n\n/// create-user-2\n\n/// create-user-3\n\n// Valid(Instance of 'User')\nfinal good = createUser(const User('John', 'Doe', 30));\n\n// Invalid(NonEmptyIList(No name provided!))\nfinal noName = createUser(const User('', 'Doe', 30));\n\n// Invalid(NonEmptyIList(Too young!))\nfinal tooYoung = createUser(const User('John', 'Doe', 7));\n\n// Invalid(NonEmptyIList(No name provided!, Too young!))\nfinal noAliasAndTooYoung = createUser(const User('John', '', 10));\n\n// Invalid(NonEmptyIList(No name provided!, No alias provided!))\nfinal noNameNoAlias = createUser(const User('', '', 75));\n\n/// create-user-3\n\n/// create-user-4\n\nfinal succeeded = createUser(const User('John', 'Doe', 30));\nfinal failed = createUser(const User('', 'Doe', 3));\n\nvoid notifyUser(String message) => throw UnimplementedError();\nvoid storeUser(User user) => throw UnimplementedError();\n\nvoid handleCreateUser() {\n  succeeded.fold(\n    (errors) =>\n        notifyUser(errors.mkString(start: 'User creation failed: ', sep: ',')),\n    (user) => storeUser(user),\n  );\n}\n\n/// create-user-4\n",s={sidebar_position:4},l="Validated",d={unversionedId:"core/validated",id:"core/validated",title:"Validated",description:"The Validated type, like Either represents the existence of one of two",source:"@site/docs/core/validated.mdx",sourceDirName:"core",slug:"/core/validated",permalink:"/ribs/docs/core/validated",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/core/validated.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Either",permalink:"/ribs/docs/core/either"},next:{title:"Collections",permalink:"/ribs/docs/core/collections"}},p={},c=[{value:"Motivation",id:"motivation",level:2}],u={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"validated"},"Validated"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Validated")," type, like ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," represents the existence of one of two\ntypes. An instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Validated")," is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Valid")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Invalid"),"."),(0,i.kt)("p",null,"Additionaly ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatedNel<E, A>")," is an alias of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Validated<NonEmptyIList<E>, A>"),"\nwhich describes either one or more errors (",(0,i.kt)("inlineCode",{parentName:"p"},"NonEmptyIList<A>>"),") or a successful\nvalue (",(0,i.kt)("inlineCode",{parentName:"p"},"A"),")."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This introduces a new datastructure used in Ribs, ",(0,i.kt)("inlineCode",{parentName:"p"},"NonEmptyIList"),", which is a\nlist that contains at least one element. You can read more about it on the\n",(0,i.kt)("a",{parentName:"p",href:"/ribs/docs/core/collections#nonemptyilist"},"NonEmptyIList page"),", but for the purposes of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Validated")," just understand it's a list with at least one element.")),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"Let's expand and improve on the example from ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," where we wanted to define\na function to create a new user from a set of inputs. Here's our domain model:"),(0,i.kt)(r.O,{language:"dart",title:"Our User Model",snippet:o,section:"create-user-1",mdxType:"CodeSnippet"}),(0,i.kt)("p",null,"Remember that our function built on ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," was capable of returning a reason\nas to why the user couldn't be created (e.g. no name provided, too young, etc.)."),(0,i.kt)("p",null,"But consider the case where there are ",(0,i.kt)("strong",{parentName:"p"},"multiple")," issues with the input. In our\nprevious implementation, once an error is encountered, that error is returned\nand we can try again, only to run into yet another error. Frustrating to be\nsure!"),(0,i.kt)("p",null,"In this case ",(0,i.kt)("inlineCode",{parentName:"p"},"Validated")," can help us by ",(0,i.kt)("strong",{parentName:"p"},"accumuulating")," all validation errors\nin case of a failure or returning the validated user. Let's take a quick look\nat what this could look like:"),(0,i.kt)(r.O,{language:"dart",title:"Utilizing ValidatedNel",snippet:o,section:"create-user-2",mdxType:"CodeSnippet"}),(0,i.kt)("p",null,"With this definition, we can validate all the individual pieces of our user\ndata and if everything looks good, get our user! If one or more of the pieces\ndoesn't pass the check, we'll get information about ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"everything"))," that needs\nfixed! Here's how it works in practice:"),(0,i.kt)(r.O,{language:"dart",title:"Validated Output",snippet:o,section:"create-user-3",mdxType:"CodeSnippet"}),(0,i.kt)("p",null,"Once we run our user through the validation, we can decide what action(s) to\ntake. If the validation failed, we may show an error. If we succeed, maybe\nstore the user to a database."),(0,i.kt)(r.O,{language:"dart",title:"Reating to ValidateNel",snippet:o,section:"create-user-4",mdxType:"CodeSnippet"}))}h.isMDXComponent=!0}}]);