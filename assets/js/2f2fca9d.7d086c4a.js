"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[841],{662:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var i=t(7462),a=(t(7294),t(3905)),r=t(4214);const s='// ignore_for_file: avoid_print\n\nimport \'package:ribs_core/ribs_core.dart\';\nimport \'package:ribs_json/ribs_json.dart\';\n\n/// parsing-1\n\nfinal Either<ParsingFailure, Json> json =\n    Json.parse(\'[ null, 1, true, "hi!", { "distance": 3.14 } ]\');\n\n/// parsing-1\n\nvoid notifyUserOfError(ParsingFailure failure) => throw UnimplementedError();\nvoid proceedToUseValidJson(Json json) => throw UnimplementedError();\n\nvoid parseData() {\n  /// parsing-2\n\n  json.fold(\n    (err) => notifyUserOfError(err),\n    (json) => proceedToUseValidJson(json),\n  );\n\n  /// parsing-2\n}\n\n/// parsing-3\nvoid printIt() {\n  print(json);\n  // Right(JArray([JNull, JNumber(1), JBoolean(true), JString("hi!"), JObject({ "distance": JNumber(3.14) })]))\n}\n\n/// parsing-3\n\n/// parsing-4\n\n// Removed the \',\' between 1 and true...\nfinal badJson = Json.parse(\'[ null, 1 true, "hi!", { "distance": 3.14 } ]\');\n\n// Left(ParsingFailure(ParseException: expected ] or , got \'true, ... (line 1, column 11) [index: 10, line: 1, col: 11]))\n\n/// parsing-4\n',o={sidebar_position:1},l="Parsing JSON",p={unversionedId:"json/parsing-json",id:"json/parsing-json",title:"Parsing JSON",description:"If you've ever used the built in Dart SDK jsonDecode function, you'll know",source:"@site/docs/json/parsing-json.mdx",sourceDirName:"json",slug:"/json/parsing-json",permalink:"/ribs/docs/json/parsing-json",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/json/parsing-json.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Syntax",permalink:"/ribs/docs/core/syntax"},next:{title:"Creating JSON",permalink:"/ribs/docs/json/creating-json"}},d={},u=[],c={toc:u},h="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"parsing-json"},"Parsing JSON"),(0,a.kt)("p",null,"If you've ever used the built in Dart SDK ",(0,a.kt)("inlineCode",{parentName:"p"},"jsonDecode")," function, you'll know\nthat your JSON (de)serialization code becomes littered with the dreaded\n",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," type. Dynamic bring along with a lot of responsibility for the\ndeveloper to check what type of data exactly they're dealing with. Then you\nalso have to deal with the potential thrown exception, adding yet another\nresponsibility which could instead be encoded as a type."),(0,a.kt)("p",null,"By contrast Ribs uses it's own parser (heavily derived from Scala's jawn),\nto build typed JSON data! No more type checks or casts using ",(0,a.kt)("inlineCode",{parentName:"p"},"is")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"as"),"\nwhich pollute your code and reduce the readability."),(0,a.kt)("p",null,"Let's begin with a very simple example to get aquainted with the Ribs JSON\nAPI:"),(0,a.kt)(r.O,{language:"dart",title:"Simple Parse",snippet:s,section:"parsing-1",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"You can see that we can simply pass a string to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Json.parse")," function\nand get our ",(0,a.kt)("strong",{parentName:"p"},"value")," back (emphasis on value because an exception will\n",(0,a.kt)("em",{parentName:"p"},"never")," be raised!). With our value, it's easy to check if the parse succeeded\nor failed from the provided JSON string. The developer will need to explicitly\nhandle a failure because the ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," type dictates it!"),(0,a.kt)(r.O,{language:"dart",title:"Handling Potentially Invalid JSON",snippet:s,section:"parsing-2",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"Assuming that we've got a valid string to parse, as we do in this example,\nwhat exactly is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Json")," type and what do we do with it? ",(0,a.kt)("inlineCode",{parentName:"p"},"Json")," is a sealed\nclass that can be one of a few possible types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JNull")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JBoolean")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JNumber")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JString")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JArray")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JObject"))),(0,a.kt)("p",null,"These represent all the possible types of JSON as defined by the spec. To\nconfirm this, print out the result of parsing the string from above:"),(0,a.kt)(r.O,{language:"dart",title:"Typed JSON",snippet:s,section:"parsing-3",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"You can see that each element of the top-level array has successfully been\nparsed and has the proper type."),(0,a.kt)("p",null,"Naturally if we feed an invalid JSON string into the parser, we'll get an\nerror. For illustrative purposes:"),(0,a.kt)(r.O,{language:"dart",title:"Typed JSON",snippet:s,section:"parsing-4",mdxType:"CodeSnippet"}))}m.isMDXComponent=!0}}]);