"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[480],{7014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var i=n(7462),a=(n(7294),n(3905)),o=n(4214);const l="import 'package:ribs_core/ribs_core.dart';\n\n/// ilist\n\nfinal l = IList.range(0, 10);\nfinal plusOne = l.map((n) => n + 1);\nfinal odds = l.filter((n) => n.isOdd);\n\nfinal maybeFirstElement = l.headOption;\nfinal numLessThan5 = l.count((n) => n < 5);\nfinal combined = l.concat(l);\nfinal dropLast3 = l.dropRight(3);\n\nfinal anyBigNumbers = l.exists((a) => a > 100);\nfinal everyoneLessThan1000 = l.forall((a) => a < 1000);\n\nfinal maybe4 = l.find((a) => a == 4);\n\n/// ilist\n\n/// nel\n\nfinal nonEmptyList = nel(1, [2, 3, 4, 5]);\n\nfinal first = nonEmptyList.head;\nfinal nelOdds = nonEmptyList.filter((a) => a.isOdd);\n\n/// nel\n\n/// imap\n\nfinal map = IMap.fromIterable([\n  ('red', 1),\n  ('orange', 2),\n  ('yellow', 3),\n  ('green', 4),\n  ('blue', 5),\n  ('indigo', 6),\n  ('violet', 7),\n]);\n\nfinal updatedMap = map.updated('green', 90);\nfinal defaultValue = map.withDefaultValue(-1);\nfinal defaultValue2 = map.withDefault((key) => key.length);\n\n/// imap\n\n/// iset\n\nfinal iset = ISet.of([1, 3, 5, 7, 9]);\n\nfinal remove5 = iset.excl(5);\nfinal remove1and9 = iset.removedAll([1, 9]);\nfinal add11 = iset + 11;\n\n/// iset\n",s={sidebar_position:5},r="Collections",p={unversionedId:"core/collections",id:"core/collections",title:"Collections",description:"Ribs had it's own IList collection implementation but it was eventually",source:"@site/docs/core/collections.mdx",sourceDirName:"core",slug:"/core/collections",permalink:"/ribs/docs/core/collections",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/core/collections.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Validated",permalink:"/ribs/docs/core/validated"},next:{title:"IO",permalink:"/ribs/docs/core/effect/io"}},d={},c=[{value:"IList",id:"ilist",level:2},{value:"NonEmptyIList",id:"nonemptyilist",level:2},{value:"IMap",id:"imap",level:2},{value:"ISet",id:"iset",level:2}],m={toc:c},f="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"collections"},"Collections"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Ribs had it's own ",(0,a.kt)("inlineCode",{parentName:"p"},"IList")," collection implementation but it was eventually\nreplaced with a version that uses ",(0,a.kt)("a",{href:"https://pub.dev/packages/fast_immutable_collections"},"Fast Immutable Collections"),"\nunder the hood for performance reasons. Ribs only has an ",(0,a.kt)("inlineCode",{parentName:"p"},"IList"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"IMap"),",\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"ISet")," to maintain control over the public API which did not originally\nmatch the FIC API. Additionally, the API was designed to follow the Scala\n",(0,a.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Map"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Set")," APIs as much as possible, to ease development of\nother Ribs libraries that were originally implemented in Scala."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"If you're interested in designing a fast and immutable collection in Dart,\nRibs is ",(0,a.kt)("em",{parentName:"strong"},"not")," the place to look! Check out the FIC library!"))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This page will only give a very short and incomplete example of each collection\ntype. It's highly recommended to explore the API for each collection type to\nget a better sense of what capabilities each provides.")),(0,a.kt)("h2",{id:"ilist"},"IList"),(0,a.kt)("p",null,"An ordered collection of 0 or more elements of the same type."),(0,a.kt)(o.O,{language:"dart",title:"IList Introduction",snippet:l,section:"ilist",mdxType:"CodeSnippet"}),(0,a.kt)("h2",{id:"nonemptyilist"},"NonEmptyIList"),(0,a.kt)("p",null,"An ordered collection of ",(0,a.kt)("strong",{parentName:"p"},"1 or more")," elements of the same type. The API\ngenerally follows that of ",(0,a.kt)("inlineCode",{parentName:"p"},"IList")," with a few modifications since it's known\nat compile time that it has at least one element."),(0,a.kt)(o.O,{language:"dart",title:"NonEmptyIList Introduction",snippet:l,section:"nel",mdxType:"CodeSnippet"}),(0,a.kt)("h2",{id:"imap"},"IMap"),(0,a.kt)("p",null,"A collection of Key-Value pairs. Values are typically accessed by providing\nthe associated key."),(0,a.kt)(o.O,{language:"dart",title:"IMap Introduction",snippet:l,section:"imap",mdxType:"CodeSnippet"}),(0,a.kt)("h2",{id:"iset"},"ISet"),(0,a.kt)("p",null,"A collection of ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"unique"))," element of the same type. There are no duplicate\nelements, as defined by each elements ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," method."),(0,a.kt)(o.O,{language:"dart",title:"ISet Introduction",snippet:l,section:"iset",mdxType:"CodeSnippet"}))}u.isMDXComponent=!0}}]);