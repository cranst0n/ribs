"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[435],{5085:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var s=t(7462),i=(t(7294),t(3905)),o=t(4214);const a='import \'package:ribs_json/ribs_json.dart\';\n\n/// creating-1\n\nfinal anObject = Json.obj([\n  (\'key1\', Json.True),\n  (\'key2\', Json.str(\'some string...\')),\n  (\n    \'key3\',\n    Json.arr([\n      Json.number(123),\n      Json.number(3.14),\n    ])\n  ),\n]);\n\n/// creating-1\n\n/// creating-2\n\nfinal jsonString = anObject.printWith(Printer.noSpaces);\n// {"key1":true,"key2":"some string...","key3":[123,3.14]}\n\nfinal prettyJsonString = anObject.printWith(Printer.spaces2);\n// {\n//   "key1" : true,\n//   "key2" : "some string...",\n//   "key3" : [\n//     123,\n//     3.14\n//   ]\n// }\n\n/// creating-2\n',r={sidebar_position:2},c="Creating JSON",p={unversionedId:"json/creating-json",id:"json/creating-json",title:"Creating JSON",description:"It's also easy to create a typed JSON structure using Ribs using the Json",source:"@site/docs/json/creating-json.mdx",sourceDirName:"json",slug:"/json/creating-json",permalink:"/ribs/docs/json/creating-json",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/json/creating-json.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Parsing JSON",permalink:"/ribs/docs/json/parsing-json"},next:{title:"Encoding and Decoding",permalink:"/ribs/docs/json/encoding-and-decoding"}},d={},l=[],g={toc:l},u="wrapper";function m(n){let{components:e,...t}=n;return(0,i.kt)(u,(0,s.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-json"},"Creating JSON"),(0,i.kt)("p",null,"It's also easy to create a typed JSON structure using Ribs using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Json"),"\nclass:"),(0,i.kt)(o.O,{language:"dart",title:"JSON Object",snippet:a,section:"creating-1",mdxType:"CodeSnippet"}),(0,i.kt)("p",null,"By passing a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"(String, Json)")," elements to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Json.obj")," function, we now have a fully\ntyped ",(0,i.kt)("inlineCode",{parentName:"p"},"Json")," object that we can interact with using the Ribs json API."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In many cases, you probably won't need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Json")," API itself. It's far\nmore common to define your domain models, and create encoders and decoders\nfor those. But it's still worthwhile knowing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Json")," type is what makes the\nhigher level APIs work.")),(0,i.kt)("p",null,"What about serializing the JSON? That's also an easy task:"),(0,i.kt)(o.O,{language:"dart",title:"Serialzing Json to String",snippet:a,section:"creating-2",mdxType:"CodeSnippet"}))}m.isMDXComponent=!0}}]);