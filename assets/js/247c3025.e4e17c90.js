"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[480],{1124:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var t=i(5893),l=i(1151),a=i(4214);const s="// ignore_for_file: avoid_print\n\nimport 'package:ribs_core/ribs_core.dart';\n\n// ilist\n\nfinal l = IList.range(0, 10);\nfinal plusOne = l.map((n) => n + 1);\nfinal odds = l.filter((n) => n.isOdd);\n\nfinal maybeFirstElement = l.headOption;\nfinal numLessThan5 = l.count((n) => n < 5);\nfinal combined = l.concat(l);\nfinal dropLast3 = l.dropRight(3);\n\nfinal anyBigNumbers = l.exists((a) => a > 100);\nfinal everyoneLessThan1000 = l.forall((a) => a < 1000);\n\nfinal maybe4 = l.find((a) => a == 4);\n\n// ilist\n\n// ivector\n\nfinal v = ivec([1, 2, 3]);\n\nfinal perms = v.permutations();\nfinal sliding = v.sliding(2, 2);\nfinal evensMinus1 = v.collect((x) => Option.when(() => x.isEven, () => x - 1));\n\nfinal scanVec = v.scan(0, (a, b) => a + b);\nfinal sortedVec = v.sorted(Order.ints.reverse());\n\n// ivector\n\n// nel\n\nfinal nonEmptyList = nel(1, [2, 3, 4, 5]);\n\nfinal first = nonEmptyList.head;\nfinal nelOdds = nonEmptyList.filter((a) => a.isOdd);\n\n// nel\n\n// range\n\nfinal rInc = Range.inclusive(0, 5).tapEach(print); // 0, 1, 2, 3, 4, 5\nfinal rExc0 = Range.exclusive(0, 5).by(2).tapEach(print); // 0, 2, 4\nfinal rExc1 = Range.exclusive(0, 5, 2).tapEach(print); // 0, 2, 4\n\n// range\n\n// imap\n\nfinal map = imap({\n  'red': 1,\n  'orange': 2,\n  'yellow': 3,\n  'green': 4,\n  'blue': 5,\n  'indigo': 6,\n  'violet': 7,\n});\n\nfinal updatedMap = map.updated('green', 90);\nfinal defaultValue = map.withDefaultValue(-1);\nfinal defaultValue2 = map.withDefault((key) => key.length);\n\n// imap\n\n// iset\n\nfinal aSet = iset([1, 3, 5, 7, 9]);\n\nfinal remove5 = aSet.excl(5);\nfinal remove1and9 = aSet.removedAll(iset([1, 9]));\nfinal add11 = aSet + 11;\n\n// iset\n",o={sidebar_position:5},r="Collections",c={id:"core/collections",title:"Collections",description:"Ribs provides it's own collection framework, heavily inspired by the Scala",source:"@site/docs/core/collections.mdx",sourceDirName:"core",slug:"/core/collections",permalink:"/ribs/docs/core/collections",draft:!1,unlisted:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/core/collections.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Validated",permalink:"/ribs/docs/core/validated"},next:{title:"Syntax",permalink:"/ribs/docs/core/syntax"}},d={},p=[{value:"IList",id:"ilist",level:2},{value:"IVector",id:"ivector",level:2},{value:"IChain",id:"ichain",level:2},{value:"NonEmptyIList",id:"nonemptyilist",level:2},{value:"Range",id:"range",level:2},{value:"IMap",id:"imap",level:2},{value:"ISet",id:"iset",level:2},{value:"ListBuffer",id:"listbuffer",level:2},{value:"MMap",id:"mmap",level:2},{value:"MSet",id:"mset",level:2}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"collections",children:"Collections"}),"\n",(0,t.jsxs)(n.p,{children:["Ribs provides it's own collection framework, ",(0,t.jsx)(n.strong,{children:"heavily"})," inspired by the Scala\nstandard collections library. It's primary aims are:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Provide ",(0,t.jsx)(n.strong,{children:"immutable"})," variants of standard collection types"]}),"\n",(0,t.jsxs)(n.li,{children:["Provide an ",(0,t.jsx)(n.strong,{children:"expressive and powerful"})," API"]}),"\n",(0,t.jsx)(n.li,{children:"Provide comparable performance to the standart Dart library collections"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This page will only give a very short and incomplete example of each collection\ntype. It's highly recommended to explore the API for each collection type to\nget a better sense of what capabilities each provides."})}),"\n",(0,t.jsx)(n.h2,{id:"ilist",children:"IList"}),"\n",(0,t.jsx)(n.p,{children:"An linked-list, ordered collection of 0 or more elements of the same type."}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"IList Introduction",snippet:s,section:"ilist"}),"\n",(0,t.jsx)(n.h2,{id:"ivector",children:"IVector"}),"\n",(0,t.jsxs)(n.p,{children:["An ordered collection of 0 or more elements of the same type. IVector uses\nfinger trees to achieve generally good, balanced performance across all\noperations. This can make it a better option than ",(0,t.jsx)(n.code,{children:"IList"})," for many operations\nthat linked lists don't do well with."]}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"IVector Introduction",snippet:s,section:"ivector"}),"\n",(0,t.jsx)(n.h2,{id:"ichain",children:"IChain"}),"\n",(0,t.jsxs)(n.p,{children:["An ordered collection of 0 or more elements of the same type. IChain provides constant\ntime ",(0,t.jsx)(n.code,{children:"append"}),", ",(0,t.jsx)(n.code,{children:"prepend"})," and ",(0,t.jsx)(n.code,{children:"concat"})," operations which make it ideal for certain\ncircumstances."]}),"\n",(0,t.jsx)(n.h2,{id:"nonemptyilist",children:"NonEmptyIList"}),"\n",(0,t.jsxs)(n.p,{children:["An ordered collection of ",(0,t.jsx)(n.strong,{children:"1 or more"})," elements of the same type."]}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"NonEmptyIList Introduction",snippet:s,section:"nel"}),"\n",(0,t.jsx)(n.h2,{id:"range",children:"Range"}),"\n",(0,t.jsxs)(n.p,{children:["Represents values in a range (inclusive or exclusive) between a start and end value, with a positive ",(0,t.jsx)(n.code,{children:"step"}),"\nvalue used to calculate successive elements."]}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"Range Introduction",snippet:s,section:"range"}),"\n",(0,t.jsx)(n.h2,{id:"imap",children:"IMap"}),"\n",(0,t.jsx)(n.p,{children:"A collection of Key-Value pairs. Values are typically accessed by providing\nthe associated key."}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"IMap Introduction",snippet:s,section:"imap"}),"\n",(0,t.jsx)(n.h2,{id:"iset",children:"ISet"}),"\n",(0,t.jsxs)(n.p,{children:["A collection of ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"unique"})})," element of the same type. There are no duplicate\nelements, as defined by each elements ",(0,t.jsx)(n.code,{children:"=="})," method."]}),"\n",(0,t.jsx)(a.O,{language:"dart",title:"ISet Introduction",snippet:s,section:"iset"}),"\n",(0,t.jsx)(n.h2,{id:"listbuffer",children:"ListBuffer"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"mutable"})," ordered collection, analogous to IList."]}),"\n",(0,t.jsx)(n.h2,{id:"mmap",children:"MMap"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"mutable"})," collection analogous to IMap."]}),"\n",(0,t.jsx)(n.h2,{id:"mset",children:"MSet"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"mutable"})," collection analogous to ISet."]})]})}function m(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);