"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[626],{8442:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var i=t(7462),o=(t(7294),t(3905)),a=t(4214);const r="import 'package:ribs_core/ribs_core.dart';\n\n/// aliases-1\n\ntypedef Function1<A, B> = B Function(A);\ntypedef Function2<A, B, C> = C Function(A, B);\n\n// These 2 function signatures are identical\nint dartFun(String Function(double) f) => throw UnimplementedError();\nint ribsFun(Function1<double, String> f) => throw UnimplementedError();\n\n/// aliases-1\n\n/// andThen-1\n\nint addOne(int x) => x + 1;\nint doubleIt(int x) => x * 2;\n\nfinal addOneThenDouble = addOne.andThen(doubleIt);\n\nfinal a = addOneThenDouble(0); // (0 + 1) * 2 == 2\nfinal b = addOneThenDouble(2); // (2 + 1) * 2 == 6\n\n/// andThen-1\n\n/// compose-1\n\nfinal doubleItThenAddOne = addOne.compose(doubleIt);\n\nfinal c = doubleItThenAddOne(0); // (0 * 2) + 1 == 1\nfinal d = doubleItThenAddOne(2); // (2 * 2) + 1 == 5\n\n/// compose-1\n\n/// currying-1\n\n// Converts a function from:\n//     (A, B) => C\n// to:\n//     A => B => C\nFunction1<A, Function1<B, C>> curryFn<A, B, C>(Function2<A, B, C> f) =>\n    throw UnimplementedError('???');\n\n/// currying-1\n\n/// curryFn-impl\n\nFunction1<A, Function1<B, C>> curryFnImpl<A, B, C>(Function2<A, B, C> f) =>\n    (a) => (b) => f(a, b);\n\n/// curryFn-impl\n\n/// currying-2\n\nint add2(int a, int b) => a + b;\n\n// Ribs also provides type aliases for curried functions that take the form\n// of FunctionNC, where the 'C' denotes the function is curried.\nfinal Function2C<int, int, int> add2Curried = add2.curried;\n\n/// currying-2\n\n/// currying-3\n\nint add3(int a, int b, int c) => a + b + c;\n\nfinal Function3C<int, int, int, int> add3Curried = add3.curried;\nfinal Function3<int, int, int, int> add3Uncurried = add3Curried.uncurried;\n\n/// currying-3\n\n/// tupled-1\n\nint fun(int a, String b, bool c) => throw UnimplementedError();\n\nFunction1<(int, String, bool), int> funTupled = fun.tupled;\n\nfinal result = funTupled((2, 'Hello!', false));\n\n/// tupled-1\n",s={sidebar_position:1},u="Functions",l={unversionedId:"core/functions",id:"core/functions",title:"Functions",description:"Shockingly, functions are one of the core elements of the functional",source:"@site/docs/core/functions.mdx",sourceDirName:"core",slug:"/core/functions",permalink:"/ribs/docs/core/functions",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/core/functions.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Acknowledgements",permalink:"/ribs/docs/acknowledgements"},next:{title:"Option",permalink:"/ribs/docs/core/option"}},d={},p=[{value:"Aliases",id:"aliases",level:2},{value:"Composition",id:"composition",level:2},{value:"andThen",id:"andthen",level:3},{value:"compose",id:"compose",level:3},{value:"Currying",id:"currying",level:2},{value:"Tupled",id:"tupled",level:2}],c={toc:p},m="wrapper";function h(n){let{components:e,...t}=n;return(0,o.kt)(m,(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"functions"},"Functions"),(0,o.kt)("p",null,"Shockingly, functions are one of the core elements of the functional\nprogramming paradigm. Accordingly, Ribs provides some tools to work with\nfunctions themselves."),(0,o.kt)("h2",{id:"aliases"},"Aliases"),(0,o.kt)("p",null,"Ribs uses a set of type aliases to make reading function signatures\n(subjectively) easier. If you've spent any time working with Scala, these\naliases should look familiar:"),(0,o.kt)(a.O,{language:"dart",title:"Function-N Aliases",snippet:r,section:"aliases-1",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Function1")," indicates that the function takes ",(0,o.kt)("strong",{parentName:"p"},"one")," parameter.\nPredictably, the ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Function2")," indicates the function takes ",(0,o.kt)("strong",{parentName:"p"},"two"),"\nparameters. Aliases exist up to 22. One benefit of these aliases is that the\ntype naturally reads left to right so we can quickly see that a\n",(0,o.kt)("inlineCode",{parentName:"p"},"Function4<String, double, int, List<Foo>>")," takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),"\nand will return a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"List<Foo>"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You don't have to use these aliases in your own code but they're worth familiarizing\nyourself with since they're used throughout the Ribs API.")),(0,o.kt)("h2",{id:"composition"},"Composition"),(0,o.kt)("p",null,"Functions are one of the smallest building blocks of our programs. To create\nuseful programs though, we'll need to use many functions together. How do they\nfit together though? That's a pretty general question but Ribs does provide a\nfew ways to help you along the way as you gradually combine your small functions\ninto something larger."),(0,o.kt)("h3",{id:"andthen"},"andThen"),(0,o.kt)("p",null,"It's often the case you'll want to feed the output of one function into another:"),(0,o.kt)(a.O,{language:"dart",title:"Simple andThen Example",snippet:r,section:"andThen-1",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,"While this example is a bit trivial, you'll likely come across instances on\nyour FP journey where chaining two function into a single value that you can\nthen pass around will result in a cleaner and more composable solution."),(0,o.kt)("h3",{id:"compose"},"compose"),(0,o.kt)("p",null,"Using the same function definitions from above we can ",(0,o.kt)("inlineCode",{parentName:"p"},"compose")," two functions:"),(0,o.kt)(a.O,{language:"dart",title:"Simple compose Example",snippet:r,section:"compose-1",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,"Examining the behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"andThen")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"compose")," leads to the conclusion that\n",(0,o.kt)("inlineCode",{parentName:"p"},"f.compose(g)")," is the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"g.andThen(f)"),"."),(0,o.kt)("h2",{id:"currying"},"Currying"),(0,o.kt)("p",null,"Ribs also provides functions to curry and uncurry functions. Currying is the\nprocess of taking a function ",(0,o.kt)("inlineCode",{parentName:"p"},"f")," that takes N parameters and turning it into a\nfunction that takes one parameter and returns a partially applied version of\n",(0,o.kt)("inlineCode",{parentName:"p"},"f")," that takes N-1 parameters. Check out this example:"),(0,o.kt)(a.O,{language:"dart",title:"Currying",snippet:r,section:"currying-1",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,"It's worth the time to work through implementing this function. But if you're\njust looking for a quick answer:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Curry Implementation"),(0,o.kt)("div",null,(0,o.kt)(a.O,{language:"dart",snippet:r,section:"curryFn-impl",mdxType:"CodeSnippet"}))),(0,o.kt)("p",null,"Now that we know what currying is, we can use Ribs provided ",(0,o.kt)("inlineCode",{parentName:"p"},"curried")," function\nfor ",(0,o.kt)("inlineCode",{parentName:"p"},"FunctionN")," (where 0 < N < 23) like so:"),(0,o.kt)(a.O,{language:"dart",title:"Currying with Ribs",snippet:r,section:"currying-2",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,'This naturally begs the question: "Can you ',(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"un")),'curry a function?". And\nthe answer is most definitely yes! Ribs provides this ability out of the box:'),(0,o.kt)(a.O,{language:"dart",title:"Uncurrying with Ribs",snippet:r,section:"currying-3",mdxType:"CodeSnippet"}),(0,o.kt)("h2",{id:"tupled"},"Tupled"),(0,o.kt)("p",null,"One last, but very useful function that Ribs provides is the ability to convert\nfunctions from accepts a set of individual arguments to one that accepts a tuple\nof the same argument types:"),(0,o.kt)(a.O,{language:"dart",title:"Tupled Function",snippet:r,section:"tupled-1",mdxType:"CodeSnippet"}),(0,o.kt)("p",null,"You may be asking why this would ever be useful but it becomes more apparent as\nyou start working with generic endcoders/decoders, data classes (which Dart doesn't\ncurrently support) and tuple destructuring among other things. It's always\ngood to stick this one in your back pocket to pull out when the situation arises."))}h.isMDXComponent=!0}}]);