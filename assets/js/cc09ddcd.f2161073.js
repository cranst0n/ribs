"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[937],{6393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905)),r=n(4214);const o="import 'package:ribs_core/ribs_core.dart';\n\n/// create-user-1\n\nfinal class User {\n  final String name;\n  final String alias;\n  final int age;\n\n  const User(this.name, this.alias, this.age);\n}\n\nOption<User> userOption(String name, String alias, int age) => (\n      Option.when(() => name.isEmpty, () => name),\n      Option.when(() => alias.isEmpty, () => alias),\n      Option.when(() => age >= 18, () => age),\n    ).mapN(User.new);\n\n/// create-user-1\n\n/// create-user-2\n\nfinal create1 = userOption('Jonathan', 'Jon', 21); // Some(User(...))\nfinal create2 = userOption('Jonathan', '', 32); // None()\nfinal create3 = userOption('', 'Jon', 55); // None()\n\n/// create-user-2\n\n/// create-user-3\n\nEither<String, User> userEither(String name, String alias, int age) {\n  if (name.isNotEmpty) {\n    if (alias.isNotEmpty) {\n      return Right(User(name, alias, age));\n    } else {\n      return const Left('Alias is required!');\n    }\n  } else {\n    return const Left('Name is required!');\n  }\n}\n\nfinal create4 = userEither('Jonathan', 'Jon', 21); // Right(Instance of 'User')\nfinal create5 = userEither('Jonathan', '', 32); // Left(Alias is required!)\nfinal create6 = userEither('', 'Jon', 55); // Left(Name is required!)\n\n/// create-user-3\n\n/// map-1\n\nconst myLeft = Left<int, String>(42);\nconst myRight = Right<int, String>('World');\n\nString greet(String str) => 'Hello $str!';\n\nfinal myLeft2 = myLeft.map(greet); // Left(42)\nfinal myRight2 = myRight.map(greet); // Right(Hello World!)\n\n/// map-1\n\n/// flatMap-1\n\nEither<String, User> validateName(User u) =>\n    Either.cond(() => u.name.isNotEmpty, () => u, () => 'User name is empty!');\n\nEither<String, User> validateAlias(User u) => Either.cond(\n    () => u.alias.isNotEmpty, () => u, () => 'User alias is empty!');\n\nEither<String, User> validateAge(User u) =>\n    Either.cond(() => u.age > 35, () => u, () => 'User is too young!');\n\nconst candidate = User('Harrison', 'Harry', 30);\n\nfinal validatedCandidate = validateName(candidate)\n    .flatMap(validateAlias)\n    .flatMap(validateAge); // Left(User is too young!)\n\n/// flatMap-1\n\n/// fold-1\n\nfinal foldLeft = const Left<bool, int>(false).fold(\n  (boolean) => 'bool value is: $boolean',\n  (integer) => 'int value is: $integer',\n);\n\n/// fold-1\n",s={sidebar_position:3},p="Either",l={unversionedId:"core/either",id:"core/either",title:"Either",description:"Either is type that represents the existence of one of two types. An instance",source:"@site/docs/core/either.mdx",sourceDirName:"core",slug:"/core/either",permalink:"/ribs/docs/core/either",draft:!1,editUrl:"https://github.com/cranst0n/ribs/edit/main/website/docs/core/either.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Option",permalink:"/ribs/docs/core/option"},next:{title:"Validated",permalink:"/ribs/docs/core/validated"}},h={},d=[{value:"Motivation",id:"motivation",level:2},{value:"Combinators",id:"combinators",level:2},{value:"map",id:"map",level:3},{value:"flatMap",id:"flatmap",level:3},{value:"fold",id:"fold",level:3}],m={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"either"},"Either"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Either")," is type that represents the existence of one of two types. An instance\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," is an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Right"),"."),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"While ",(0,a.kt)("inlineCode",{parentName:"p"},"Option")," is a great weapon to have in our functional toolbelt, sometimes\nit isn't enough. Sometimes it makes sense to provide additional information\nwhen our functions don't follow the \"happy path\". For ",(0,a.kt)("inlineCode",{parentName:"p"},"Option"),"s, the happy\npath can be considered returning ",(0,a.kt)("inlineCode",{parentName:"p"},"Some(...)")," while the failure path would be\nreturning ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". But consider the example below:"),(0,a.kt)(r.O,{language:"dart",title:"User Creation using Option",snippet:o,section:"create-user-1",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"Reading the code, we can see that a new user requires a non-empty name ",(0,a.kt)("strong",{parentName:"p"},"and"),"\na non-empty alias. Let's see what happens when we try to create a few users:"),(0,a.kt)(r.O,{language:"dart",snippet:o,section:"create-user-2",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"We can see that the function works as intended which is great but consider\nthe results returned in the failure case when the user's name and/or alias is\nempty. They're all ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". It would be much better if we could return a reason\nwhy the user couldn't be created right? So let's do better using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Either"),"\ntype:"),(0,a.kt)(r.O,{language:"dart",title:"User Creation using Either",snippet:o,section:"create-user-3",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"Much better! We can now see ",(0,a.kt)("strong",{parentName:"p"},"why")," the function was unable to create the user\nin each instance. This would be great information to pass along to the user\nto help them navigate our application."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},'We said earlier that the "happy" path for ',(0,a.kt)("inlineCode",{parentName:"p"},"Option")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"Some")," vs. the failure\npath of ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". So what is the happy/failure paths for ",(0,a.kt)("inlineCode",{parentName:"p"},"Either"),"? Looking at\nthe previous examples, it should become clear that the happy path is ",(0,a.kt)("inlineCode",{parentName:"p"},"Right"),"\nwhile the failure path is ",(0,a.kt)("inlineCode",{parentName:"p"},"Left"),". This is by convention so you could choose\nto ignore this, but be aware that many combinators in the Either API treat\nthe Right side as the happy path, leading to the statement that ",(0,a.kt)("inlineCode",{parentName:"p"},"Either"),' is\n"right biased".')),(0,a.kt)("h2",{id:"combinators"},"Combinators"),(0,a.kt)("h3",{id:"map"},"map"),(0,a.kt)("p",null,"Much like ",(0,a.kt)("inlineCode",{parentName:"p"},"Option")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," method on ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," will apply a function to\nthe value, so long as the ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," is an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Right"),":"),(0,a.kt)(r.O,{language:"dart",snippet:o,section:"map-1",mdxType:"CodeSnippet"}),(0,a.kt)("h3",{id:"flatmap"},"flatMap"),(0,a.kt)("p",null,"Chaining functions that return ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," is simple using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Either.flatMap"),"\nfunction:"),(0,a.kt)(r.O,{language:"dart",snippet:o,section:"flatMap-1",mdxType:"CodeSnippet"}),(0,a.kt)("h3",{id:"fold"},"fold"),(0,a.kt)("p",null,"Lastly, when you want to create a summary value from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Either")," depending\non whether it's a ",(0,a.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Right"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"fold")," method makes it easy:"),(0,a.kt)(r.O,{language:"dart",snippet:o,section:"fold-1",mdxType:"CodeSnippet"}),(0,a.kt)("p",null,"As specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"fold")," function signature, each function provided\n",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"must"))," return a value of the same type."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Either has a lot of other useful combinators to make using them easy\nand expressive! Check out the API to explore them.")))}c.isMDXComponent=!0}}]);